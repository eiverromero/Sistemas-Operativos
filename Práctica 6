#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

int main() {
    int pipe1[2], pipe2[2]; // Dos pipes: uno para cada hijo
    pid_t pid1, pid2;

    // Crear el primer pipe
    if (pipe(pipe1) == -1) {
        perror("Error al crear pipe1");
        exit(1);
    }

    // Crear el segundo pipe
    if (pipe(pipe2) == -1) {
        perror("Error al crear pipe2");
        exit(1);
    }

    // Crear el primer hijo
    pid1 = fork();
    if (pid1 < 0) {
        perror("Error al crear el primer hijo");
        exit(1);
    }

    if (pid1 == 0) {  
        // Código del hijo 1
        close(pipe1[1]); // Cierra el extremo de escritura
        char buffer[100];
        read(pipe1[0], buffer, sizeof(buffer));
        printf("Hijo 1 recibió: %s\n", buffer);
        close(pipe1[0]);
        exit(0);
    } else {
        // Crear el segundo hijo
        pid2 = fork();
        if (pid2 < 0) {
            perror("Error al crear el segundo hijo");
            exit(1);
        }

        if (pid2 == 0) {  
            // Código del hijo 2
            close(pipe2[1]); // Cierra el extremo de escritura
            char buffer[100];
            read(pipe2[0], buffer, sizeof(buffer));
            printf("Hijo 2 recibió: %s\n", buffer);
            close(pipe2[0]);
            exit(0);
        } else {
            // Código del padre
            close(pipe1[0]); // Cierra el extremo de lectura
            close(pipe2[0]);

            char mensaje1[] = "Hola hijo 1, soy tu padre.";
            char mensaje2[] = "Hola hijo 2, soy tu padre.";

            write(pipe1[1], mensaje1, strlen(mensaje1) + 1);
            write(pipe2[1], mensaje2, strlen(mensaje2) + 1);

            close(pipe1[1]);
            close(pipe2[1]);

            // Esperar a que terminen los hijos
            wait(NULL);
            wait(NULL);
        }
    }

    return 0;
}
